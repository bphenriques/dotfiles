[
    "2",
    "3",
    "{\n sealed trait Maybe[+T]\nfinal case object Empty extends Maybe[Nothing]\nfinal case class Just[T](t: T) extends Maybe[T]\n;;;;;;;;; }",
    "{\n sealed trait Maybe[+T]\nfinal case object Empty extends Maybe[Nothing]\nfinal case class Just[T](t: T) extends Maybe[T]\n;;;;;;;;; }",
    "{\n sealed trait Maybe[+T]\nfinal case object Empty extends Maybe[Nothing]\nfinal case class Just[T](t: T) extends Maybe[T]\n;;;;;;;;; }",
    "{\n case class Cenas(val a: Int)\n;;;;;;;;; }",
    "2",
    "{\n case class Cenas(val a: Int)\n;;;;;;;;; }",
    "{\n sealed trait Maybe[+T]\nfinal case object Empty extends Maybe[Nothing]\nfinal case class Just[T](t: T) extends Maybe[T]\n;;;;;;;;; }",
    "{\n sealed trait Maybe[+T]\nfinal case object Empty extends Maybe[Nothing]\nfinal case class Just[T](t: T) extends Maybe[T]\n;;;;;;;;; }",
    "{\n case class Cenas(val a: Int)\ncase class Outras(val b: Int)\n;;;;;;;;; }",
    "{\n case class Cenas(val a: Int)\ncase class Outras(val b: Int)\n;;;;;;;;; }",
    "{\n case class Cenas(val a: Int)\ncase class Outras(val b: Int)\n;;;;;;;;; }",
    "{\n case class Cenas(val a: Int)\ncase class Outras(val b: Int)\n;;;;;;;;; }",
    "{\n case class Cenas(val a: Int)\ncase class Outras(val b: Int)\n;;;;;;;;; }",
    "{\n case class Cenas(val a: Int)\ncase class Outras(val b: Int)\n;;;;;;;;; }",
    "{\n sealed trait Maybe[+T]\nfinal case object Empty extends Maybe[Nothing]\nfinal case class Just[T](t: T) extends Maybe[T]\n;;;;;;;;; }",
    "{\n defined trait Maybe",
    "defined object Empty",
    "defined class Just",
    ";;;;;;;;; }",
    "{\n sealed trait Maybe[+T]\nfinal case object Empty extends Maybe[Nothing]\nfinal case class Just[T](t: T) extends Maybe[T]\n;;;;;;;;; }",
    "{\n sealed trait Maybe[+T]\nfinal case object Empty extends Maybe[Nothing]\nfinal case class Just[T](t: T) extends Maybe[T]\n;;;;;;;;; }",
    "{\n sealed trait Maybe[+T]\nfinal case object Empty extends Maybe[Nothing]\nfinal case class Just[T](t: T) extends Maybe[T]\n;;;;;;;;; }",
    "{\n sealed trait Maybe[+T]\nfinal case object Empty extends Maybe[Nothing]\nfinal case class Just[T](t: T) extends Maybe[T]\n;;;;;;;;; }",
    "{\n sealed trait Maybe[+T]\nfinal case object Empty extends Maybe[Nothing]\nfinal case class Just[T](t: T) extends Maybe[T]\n;;;;;;;;; }",
    "{\n sealed trait Maybe[+T]\nfinal case object Empty extends Maybe[Nothing]\nfinal case class Just[T](t: T) extends Maybe[T]\n;;;;;;;;; }",
    "{\n sealed trait Maybe[+T]\nfinal case object Empty extends Maybe[Nothing]\nfinal case class Just[T](t: T) extends Maybe[T]\n;;;;;;;;; }",
    "{\n sealed trait Maybe[+T]\nfinal case object Empty extends Maybe[Nothing]\nfinal case class Just[T](t: T) extends Maybe[T]\n;;;;;;;;; }",
    "{\n sealed trait Maybe[+T]\nfinal case object Empty extends Maybe[Nothing]\nfinal case class Just[T](t: T) extends Maybe[T]\n;;;;;;;;; }",
    "{\n sealed trait Maybe[+T]\nfinal case object Empty extends Maybe[Nothing]\nfinal case class Just[T](t: T) extends Maybe[T]\n;;;;;;;;; }",
    "{\n sealed trait Maybe[+T]\nfinal case object Empty extends Maybe[Nothing]\nfinal case class Just[T](t: T) extends Maybe[T]\n;;;;;;;;; }",
    "{\n sealed trait Maybe[+T]\nfinal case object Empty extends Maybe[Nothing]\nfinal case class Just[T](t: T) extends Maybe[T]\n;;;;;;;;; }",
    "{\n sealed trait Maybe[+T]\nfinal case object Empty extends Maybe[Nothing]\nfinal case class Just[T](t: T) extends Maybe[T]\n;;;;;;;;; }",
    "{\n sealed trait Maybe[+T]\nfinal case object Empty extends Maybe[Nothing]\nfinal case class Just[T](t: T) extends Maybe[T]\n;;;;;;;;; }",
    "{\n sealed trait Maybe[+T]\nfinal case object Empty extends Maybe[Nothing]\nfinal case class Just[T](t: T) extends Maybe[T]\nprintln(2)\n;;;;;;;;; }",
    "{\n sealed trait Maybe[+T]\nfinal case object Empty extends Maybe[Nothing]\nfinal case class Just[T](t: T) extends Maybe[T]\nprintln(2)\n;;;;;;;;; }",
    "{\n sealed trait Maybe[+T]\nfinal case object Empty extends Maybe[Nothing]\nfinal case class Just[T](t: T) extends Maybe[T]\nprintln(2)\n\nval a = Just(2)\nprintln(a)\n;;;;;;;;; }",
    "{\n sealed trait Maybe[+T]\nfinal case object Empty extends Maybe[Nothing]\nfinal case class Just[T](t: T) extends Maybe[T]\nprintln(2)\n\nval a = Just(2)\nprintln(a)\n;;;;;;;;; }",
    "sealed trait Maybe[+T]",
    "final case object Empty extends Maybe[Nothing]",
    "final case class Empty extends Maybe[Nothing]",
    "{\n sealed trait Maybe[+T]\nfinal case object Empty extends Maybe[Nothing]\nfinal case class Just[T](t: T) extends Maybe[T]\nprintln(2)\n\nval a = Just(2)\nprintln(a)\n;;;;;;;;; }",
    "{\n case class Cenas(val a: Int)\ncase class Outras(val b: Int)\n;;;;;;;;; }",
    "{\n sealed trait Maybe[+T]\nfinal case object Empty extends Maybe[Nothing]\nfinal case class Just[T](t: T) extends Maybe[T]\nprintln(2)\n\nval a = Just(2)\nprintln(a)\n;;;;;;;;; }"
]